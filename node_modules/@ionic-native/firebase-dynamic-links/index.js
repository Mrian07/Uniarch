var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseDynamicLinksOriginal = /** @class */ (function (_super) {
    __extends(FirebaseDynamicLinksOriginal, _super);
    function FirebaseDynamicLinksOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDynamicLinksOriginal.prototype.getDynamicLink = function () { return cordova(this, "getDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.onDynamicLink = function () { return cordova(this, "onDynamicLink", { "callbackOrder": "reverse", "observable": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createDynamicLink = function (opts) { return cordova(this, "createDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createShortDynamicLink = function (opts) { return cordova(this, "createShortDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.prototype.createUnguessableDynamicLink = function (opts) { return cordova(this, "createUnguessableDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinksOriginal.pluginName = "FirebaseDynamicLinks";
    FirebaseDynamicLinksOriginal.plugin = " cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinksOriginal.pluginRef = "cordova.plugins.firebase.dynamiclinks";
    FirebaseDynamicLinksOriginal.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinksOriginal.install = "ionic cordova plugin add cordova-plugin-firebase-dynamiclinks --save --variable APP_DOMAIN=\"example.com\" --variable APP_PATH=\"/\"";
    FirebaseDynamicLinksOriginal.installVariables = ["APP_DOMAIN", "APP_PATH"];
    FirebaseDynamicLinksOriginal.platforms = ["Android", "iOS"];
    return FirebaseDynamicLinksOriginal;
}(IonicNativePlugin));
var FirebaseDynamicLinks = new FirebaseDynamicLinksOriginal();
export { FirebaseDynamicLinks };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWR5bmFtaWMtbGlua3MvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFnR1Esd0NBQWlCOzs7O0lBUXpELDZDQUFjO0lBWWQsNENBQWE7SUFZYixnREFBaUIsYUFBQyxJQUFrQjtJQVlwQyxxREFBc0IsYUFBQyxJQUFrQjtJQVl6QywyREFBNEIsYUFBQyxJQUFrQjs7Ozs7Ozs7K0JBMUpqRDtFQWtHMEMsaUJBQWlCO1NBQTlDLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElEeW5hbWljTGluayB7XG4gIG1hdGNoVHlwZTogJ1dlYWsnIHwgJ1N0cm9uZyc7XG4gIGRlZXBMaW5rOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpbmtPcHRpb25zIHtcbiAgZG9tYWluVXJpUHJlZml4Pzogc3RyaW5nO1xuICBsaW5rPzogc3RyaW5nO1xuICBhbmRyb2lkSW5mbz86IHtcbiAgICBhbmRyb2lkUGFja2FnZU5hbWU/OiBzdHJpbmc7XG4gICAgYW5kcm9pZEZhbGxiYWNrTGluaz86IHN0cmluZztcbiAgICBhbmRyb2lkTWluUGFja2FnZVZlcnNpb25Db2RlPzogbnVtYmVyO1xuICB9O1xuICBpb3NJbmZvPzoge1xuICAgIGlvc0J1bmRsZUlkPzogc3RyaW5nO1xuICAgIGlvc0ZhbGxiYWNrTGluaz86IHN0cmluZztcbiAgICBpb3NJcGFkRmFsbGJhY2tMaW5rPzogc3RyaW5nO1xuICAgIGlvc0lwYWRCdW5kbGVJZD86IHN0cmluZztcbiAgICBpb3NBcHBTdG9yZUlkPzogc3RyaW5nO1xuICB9O1xuICBuYXZpZ2F0aW9uSW5mbz86IHtcbiAgICBlbmFibGVGb3JjZWRSZWRpcmVjdD86IGJvb2xlYW47XG4gIH07XG4gIGFuYWx5dGljc0luZm8/OiB7XG4gICAgZ29vZ2xlUGxheUFuYWx5dGljcz86IHtcbiAgICAgIHV0bVNvdXJjZT86IHN0cmluZztcbiAgICAgIHV0bU1lZGl1bT86IHN0cmluZztcbiAgICAgIHV0bUNhbXBhaWduPzogc3RyaW5nO1xuICAgICAgdXRtVGVybT86IHN0cmluZztcbiAgICAgIHV0bUNvbnRlbnQ/OiBzdHJpbmc7XG4gICAgfTtcbiAgICBpdHVuZXNDb25uZWN0QW5hbHl0aWNzPzoge1xuICAgICAgYXQ/OiBzdHJpbmc7XG4gICAgICBjdD86IHN0cmluZztcbiAgICAgIHB0Pzogc3RyaW5nO1xuICAgIH07XG4gIH07XG4gIHNvY2lhbE1ldGFUYWdJbmZvPzoge1xuICAgIHNvY2lhbFRpdGxlPzogc3RyaW5nO1xuICAgIHNvY2lhbERlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHNvY2lhbEltYWdlTGluaz86IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBAYmV0YVxuICogQG5hbWUgRmlyZWJhc2UgRHluYW1pYyBMaW5rc1xuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiBmb3IgRmlyZWJhc2UgRHluYW1pYyBMaW5rc1xuICpcbiAqIFZhcmlhYmxlcyBBUFBfRE9NQUlOIGFuZCBBUFBfUEFUSCBzcGVjaWZ5IHdlYiBVUkwgd2hlcmUgeW91ciBhcHAgd2lsbCBzdGFydCBhbiBhY3Rpdml0eSB0byBoYW5kbGUgdGhlIGxpbmsuIFRoZXkgYWxzbyB1c2VkIHRvIHNldHVwIHN1cHBvcnQgZm9yIEFwcCBJbmRleGluZy5cbiAqIEdvIHRvIGZpcmViYXNlIGNvbnNvbGUgYW5kIGV4cG9ydCBnb29nbGUtc2VydmljZXMuanNvbiBhbmQgR29vZ2xlU2VydmljZS1JbmZvLnBsaXN0LiBQdXQgdGhvc2UgZmlsZXMgaW50byB0aGUgcm9vdCBvZiB5b3VyIGNvcmRvdmEgYXBwIGZvbGRlci5cbiAqXG4gKiBQcmVmZXJlbmNlczpcbiAqXG4gKiBQcmVmZXJlbmNlcyBHb29nbGVJT1NDbGllbnRJZCBhbmQgR29vZ2xlQW5kcm9pZENsaWVudElkIGFyZSB1c2VkIHRvIHNldHVwIGR5bmFtaWMgbGlua3Mgd2hlbiB5b3UgaGF2ZSBhbiBhcHAgZm9yIHNldmVyYWwgcGxhdGZvcm1zLlxuICogWW91IGNhbiBmaW5kIHZhbHVlcyBhdCB5b3VyIEdvb2dsZVNlcnZpY2UtSW5mby5wbGlzdCAoa2V5IEFORFJPSURfQ0xJRU5UX0lEKSBhbmQgZ29vZ2xlLXNlcnZpY2VzLmpzb24gKGtleSBjbGllbnRbMF0ub2F1dGhfY2xpZW50WzBdLmNsaWVudF9pZCkuXG4gKlxuICogY29uZmlnLnhtbDpcbiAqIGBgYHhtbFxuICogPHBsYXRmb3JtIG5hbWU9XCJpb3NcIj5cbiAqICAgICA8cHJlZmVyZW5jZSBuYW1lPVwiR29vZ2xlSU9TQ2xpZW50SWRcIiB2YWx1ZT1cIi4uLlwiIC8+XG4gKiA8L3BsYXRmb3JtPlxuICogPHBsYXRmb3JtIG5hbWU9XCJhbmRyb2lkXCI+XG4gKiAgICAgPHByZWZlcmVuY2UgbmFtZT1cIkdvb2dsZUFuZHJvaWRDbGllbnRJZFwiIHZhbHVlPVwiLi4uXCIgLz5cbiAqIDwvcGxhdGZvcm0+XG4gKiBgYGBcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRmlyZWJhc2VEeW5hbWljTGlua3MgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2ZpcmViYXNlLWR5bmFtaWMtbGlua3Mvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmaXJlYmFzZUR5bmFtaWNMaW5rczogRmlyZWJhc2VEeW5hbWljTGlua3MpIHsgfVxuICpcbiAqIC4uLlxuICogLy8gSGFuZGxlIHRoZSBsb2dpYyBoZXJlIGFmdGVyIG9wZW5pbmcgdGhlIGFwcCB3aXRoIHRoZSBEeW5hbWljIGxpbmtcbiAqIHRoaXMuZmlyZWJhc2VEeW5hbWljTGlua3Mub25EeW5hbWljTGluaygpXG4gKiAgIC5zdWJzY3JpYmUoKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpLCAoZXJyb3I6YW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIER5bmFtaWNMaW5rc09wdGlvbnNcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGaXJlYmFzZUR5bmFtaWNMaW5rcycsXG4gIHBsdWdpbjogJyBjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1keW5hbWljbGlua3MnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlyZWJhc2UuZHluYW1pY2xpbmtzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWR5bmFtaWNsaW5rcycsXG4gIGluc3RhbGw6XG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBjb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1keW5hbWljbGlua3MgLS1zYXZlIC0tdmFyaWFibGUgQVBQX0RPTUFJTj1cImV4YW1wbGUuY29tXCIgLS12YXJpYWJsZSBBUFBfUEFUSD1cIi9cIicsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnQVBQX0RPTUFJTicsICdBUFBfUEFUSCddLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VEeW5hbWljTGlua3MgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBhcHAgaGFzIGEgcGVuZGluZyBkeW5hbWljIGxpbmsgYW5kIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgZHluYW1pYyBsaW5rIHBhcmFtZXRlcnMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SUR5bmFtaWNMaW5rPn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIGdldER5bmFtaWNMaW5rKCk6IFByb21pc2U8SUR5bmFtaWNMaW5rPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFjayB0aGF0IGlzIHRyaWdnZXJlZCBvbiBlYWNoIGR5bmFtaWMgbGluayBjbGljay5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxJRHluYW1pY0xpbms+fSBSZXR1cm5zIGFuIG9ic2VydmFibGVcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgb25EeW5hbWljTGluaygpOiBPYnNlcnZhYmxlPElEeW5hbWljTGluaz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRHluYW1pYyBMaW5rIGZyb20gdGhlIHBhcmFtZXRlcnMuIFJldHVybnMgYSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHRoZSBuZXcgZHluYW1pYyBsaW5rIHVybC5cbiAgICogQHBhcmFtIHtJTGlua09wdGlvbnN9IG9wdCBbRHluYW1pYyBMaW5rIFBhcmFtZXRlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWR5bmFtaWNsaW5rcyNkeW5hbWljLWxpbmstcGFyYW1ldGVycylcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB1cmxcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIGNyZWF0ZUR5bmFtaWNMaW5rKG9wdHM6IElMaW5rT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzaG9ydGVuZWQgRHluYW1pYyBMaW5rIGZyb20gdGhlIHBhcmFtZXRlcnMuIFNob3J0ZW4gdGhlIHBhdGggdG8gYSBzdHJpbmcgdGhhdCBpcyBvbmx5IGFzIGxvbmcgYXMgbmVlZGVkIHRvIGJlIHVuaXF1ZSwgd2l0aCBhIG1pbmltdW0gbGVuZ3RoIG9mIDQgY2hhcmFjdGVycy4gVXNlIHRoaXMgbWV0aG9kIGlmIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiB3b3VsZCBub3QgYmUgZXhwb3NlZCBpZiBhIHNob3J0IER5bmFtaWMgTGluayBVUkwgd2VyZSBndWVzc2VkLlxuICAgKiBAcGFyYW0ge0lMaW5rT3B0aW9uc30gb3B0IFtEeW5hbWljIExpbmsgUGFyYW1ldGVyc10oaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtZHluYW1pY2xpbmtzI2R5bmFtaWMtbGluay1wYXJhbWV0ZXJzKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHVybFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgY3JlYXRlU2hvcnREeW5hbWljTGluayhvcHRzOiBJTGlua09wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRHluYW1pYyBMaW5rIGZyb20gdGhlIHBhcmFtZXRlcnMuIFNob3J0ZW4gdGhlIHBhdGggdG8gYW4gdW5ndWVzc2FibGUgc3RyaW5nLiBTdWNoIHN0cmluZ3MgYXJlIGNyZWF0ZWQgYnkgYmFzZTYyLWVuY29kaW5nIHJhbmRvbWx5IGdlbmVyYXRlZCA5Ni1iaXQgbnVtYmVycywgYW5kIGNvbnNpc3Qgb2YgMTcgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuIFVzZSB1bmd1ZXNzYWJsZSBzdHJpbmdzIHRvIHByZXZlbnQgeW91ciBEeW5hbWljIExpbmtzIGZyb20gYmVpbmcgY3Jhd2xlZCwgd2hpY2ggY2FuIHBvdGVudGlhbGx5IGV4cG9zZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7SUxpbmtPcHRpb25zfSBvcHQgW0R5bmFtaWMgTGluayBQYXJhbWV0ZXJzXShodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1keW5hbWljbGlua3MjZHluYW1pYy1saW5rLXBhcmFtZXRlcnMpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgdXJsXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICB9KVxuICBjcmVhdGVVbmd1ZXNzYWJsZUR5bmFtaWNMaW5rKG9wdHM6IElMaW5rT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=