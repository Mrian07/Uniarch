{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface ToastOptions {\n    /**\n     * Message to display\n     */\n    message?: string;\n    /**\n     * Duration in ms to show\n     */\n    duration?: number;\n    /**\n     * Position\n     */\n    position?: string;\n    /**\n     * Add negative value to move it up a bit\n     */\n    addPixelsY?: number;\n    /**\n     * Pass JSON object to be sent back in success callback\n     */\n    data?: any;\n    /**\n     * Styling\n     */\n    styling?: {\n        opacity?: number;\n        backgroundColor?: string;\n        textColor?: string;\n        cornerRadius?: number;\n        horizontalPadding?: number;\n        verticalPadding?: number;\n    };\n}\n/**\n * @name Toast\n * @description\n * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.\n *\n * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).\n *\n * @usage\n * ```typescript\n * import { Toast } from '@ionic-native/toast/ngx';\n *\n * constructor(private toast: Toast) { }\n *\n * ...\n *\n * this.toast.show(`I'm a toast`, '5000', 'center').subscribe(\n *   toast => {\n *     console.log(toast);\n *   }\n * );\n * ```\n * @interfaces\n * ToastOptions\n */\nexport declare class Toast extends IonicNativePlugin {\n    /**\n     * Show a native toast for the given duration at the specified position.\n     *\n     * @param {string} message  The message to display.\n     * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n     * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    show(message: string, duration: string, position: string): Observable<any>;\n    /**\n     * Manually hide any currently visible toast.\n     * @returns {Promise<any>} Returns a Promise that resolves on success.\n     */\n    hide(): Promise<any>;\n    /**\n     * Show a native toast with the given options.\n     *\n     * @param {Object} options  Options for showing a toast. Available options:\n     *   message  The message to display.\n     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\n     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\n     *\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showWithOptions(options: ToastOptions): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'short', 'top')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortTop(message: string): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'short', 'center')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortCenter(message: string): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'short', 'bottom')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showShortBottom(message: string): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'long', 'top')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongTop(message: string): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'long', 'center')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongCenter(message: string): Observable<any>;\n    /**\n     * Shorthand for `show(message, 'long', 'bottom')`.\n     * @param message {string}\n     * @returns {Observable<any>}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    showLongBottom(message: string): Observable<any>;\n}\n"]}