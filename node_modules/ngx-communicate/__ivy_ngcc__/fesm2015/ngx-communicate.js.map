{"version":3,"file":"ngx-communicate.js","sources":["ng:/ngx-communicate/lib/ngx-communicate.service.ts","ng:/ngx-communicate/lib/ngx-communicate.module.ts"],"names":[],"mappings":";;;;;;;;AAAA,MAKa,qBAAqB;AAClC,IAEE;AAAgB,QAFR,SAAI,GAA4C,IAAI,GAAG,EAAsC,CAAC;AACxG,KACmB;AACnB;AAEC;AACG;AACG;AAED;AAAuB;AACtB;AAAQ,IADb,SAAS,CAAC,KAAa,EAAE,IAAS;AAAI;AACrB,cAAT,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;AAClD,QAAI,WAAW,CAAC,OAAO;AAAM;AAG7B;AAEC;AAAY,QALW,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,EAAC,CAAC;AACxD,KAAG;AACH;AAEC;AACG;AACG;AAEL;AACkB;AAA2B;AAClC;AAAQ,IADnB,EAAE,CAAC,KAAa,EAAE,QAA6B;AACjD;AAAyB,YAAjB,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;AAC1C,QACI,IAAI,WAAW,IAAI,SAAS;AAChC,YAAM,WAAW,GAAG,IAAI,KAAK,EAAE,CAAC;AAChC,QAEI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC/B,QAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;AACtC,KAAG;AACH;iDAlCC,UAAU,SAAC,kBACV,UAAU,EAAE,MAAM,cACnB;mJACI;AAAC;AAAmB;AACY;;;;;;gDAUnB;AAAC;AAAa;AAAQ;AACnC;AAAgB;AAAQ,IAX3B,qCAAsG;AACxG;AACC;AAAC;AAAI;AAGO;AAGR;AAG8B;ACjBnC,MAUa,oBAAoB;AACjC;AAAQ;AAAmB;AAAQ,IAAjC,OAAO,OAAO;AAAK,QACjB,OAAO;AACX,YAAM,QAAQ,EAAE,oBAAoB;AACpC,YAAM,SAAS,EAAE,CAAC,qBAAqB,CAAC;AACxC,SAAK,CAAA;AACL,KAAG;AACH;gDAZC,QAAQ,SAAC,kBACR;UAAY,EAAE,EAAE,kBAChB,OAAO,EAAE,EAAE,kBACX,OAAO,EAAE,EAAE,cACZ;;;;;;;;0BACI;AAAC;AAAC;AAAI;AACF;AACT;AAM8B;AAAI;AAAC;AAAI;AAAkC;AAAsC;AAAsI;AAAI;AAAC;AAAwD","sourcesContent":["import { Injectable } from \"@angular/core\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class NgxCommunicateService {\n  private _map: Map<string, Array<(data: any) => void>> = new Map<string, Array<(data: any) => void>>();\n\n  constructor() { }\n\n  /**\n   * @method send\n   * @property data\n   * @returns void\n   */\n  broadcast(event: string, data: any): void {\n    const subscribers = this._map.get(event) || [];\n    subscribers.forEach(subscriber => subscriber(data));\n  }\n\n  /**\n   * @method on\n   * @description Subscribes to an event\n   * @var event Event Name\n   * @var callback the function that will return the data of that event\n   */\n  on(event: string, callback: (data: any) => void) {\n    let subscribers = this._map.get(event);\n\n    if (subscribers == undefined)\n      subscribers = new Array();\n\n\n    subscribers.push(callback);\n    this._map.set(event, subscribers);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgxCommunicateService } from './ngx-communicate.service';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [],\n  exports: []\n})\nexport class NgxCommunicateModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: NgxCommunicateModule,\n      providers: [NgxCommunicateService]\n    }\n  }\n}\n"]}