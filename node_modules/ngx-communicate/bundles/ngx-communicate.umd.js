(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-communicate', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ngx-communicate'] = {}, global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-communicate.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxCommunicateService = /** @class */ (function () {
        function NgxCommunicateService() {
            this._map = new Map();
        }
        /**
         * @method send
         * @property data
         * @returns void
         */
        /**
         * \@method send
         * \@property data
         * @param {?} event
         * @param {?} data
         * @return {?} void
         */
        NgxCommunicateService.prototype.broadcast = /**
         * \@method send
         * \@property data
         * @param {?} event
         * @param {?} data
         * @return {?} void
         */
        function (event, data) {
            /** @type {?} */
            var subscribers = this._map.get(event) || [];
            subscribers.forEach((/**
             * @param {?} subscriber
             * @return {?}
             */
            function (subscriber) { return subscriber(data); }));
        };
        /**
         * @method on
         * @description Subscribes to an event
         * @var event Event Name
         * @var callback the function that will return the data of that event
         */
        /**
         * \@method on
         * \@description Subscribes to an event
         * \@var event Event Name / callback the function that will return the data of that event
         * @param {?} event
         * @param {?} callback
         * @return {?}
         */
        NgxCommunicateService.prototype.on = /**
         * \@method on
         * \@description Subscribes to an event
         * \@var event Event Name / callback the function that will return the data of that event
         * @param {?} event
         * @param {?} callback
         * @return {?}
         */
        function (event, callback) {
            /** @type {?} */
            var subscribers = this._map.get(event);
            if (subscribers == undefined)
                subscribers = new Array();
            subscribers.push(callback);
            this._map.set(event, subscribers);
        };
        NgxCommunicateService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: "root"
                    },] }
        ];
        /** @nocollapse */
        NgxCommunicateService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxCommunicateService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgxCommunicateService_Factory() { return new NgxCommunicateService(); }, token: NgxCommunicateService, providedIn: "root" });
        return NgxCommunicateService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxCommunicateService.prototype._map;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ngx-communicate.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxCommunicateModule = /** @class */ (function () {
        function NgxCommunicateModule() {
        }
        /**
         * @return {?}
         */
        NgxCommunicateModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: NgxCommunicateModule,
                providers: [NgxCommunicateService]
            };
        };
        NgxCommunicateModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: []
                    },] }
        ];
        return NgxCommunicateModule;
    }());

    exports.NgxCommunicateModule = NgxCommunicateModule;
    exports.NgxCommunicateService = NgxCommunicateService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-communicate.umd.js.map
