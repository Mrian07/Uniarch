import { Injectable, ɵɵdefineInjectable, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-communicate.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
class NgxCommunicateService {
    constructor() {
        this._map = new Map();
    }
    /**
     * \@method send
     * \@property data
     * @param {?} event
     * @param {?} data
     * @return {?} void
     */
    broadcast(event, data) {
        /** @type {?} */
        const subscribers = this._map.get(event) || [];
        subscribers.forEach((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => subscriber(data)));
    }
    /**
     * \@method on
     * \@description Subscribes to an event
     * \@var event Event Name / callback the function that will return the data of that event
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    on(event, callback) {
        /** @type {?} */
        let subscribers = this._map.get(event);
        if (subscribers == undefined)
            subscribers = new Array();
        subscribers.push(callback);
        this._map.set(event, subscribers);
    }
}
NgxCommunicateService.ɵfac = function NgxCommunicateService_Factory(t) { return new (t || NgxCommunicateService)(); };
NgxCommunicateService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgxCommunicateService, factory: NgxCommunicateService.ɵfac, providedIn: "root" });
/** @nocollapse */
NgxCommunicateService.ctorParameters = () => [];
/** @nocollapse */ NgxCommunicateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function NgxCommunicateService_Factory() { return new NgxCommunicateService(); }, token: NgxCommunicateService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCommunicateService, [{
        type: Injectable,
        args: [{
                providedIn: "root"
            }]
    }], function () { return []; }, null); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxCommunicateService.prototype._map;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-communicate.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxCommunicateModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxCommunicateModule,
            providers: [NgxCommunicateService]
        };
    }
}
NgxCommunicateModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxCommunicateModule });
NgxCommunicateModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxCommunicateModule_Factory(t) { return new (t || NgxCommunicateModule)(); }, imports: [[]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxCommunicateModule, [{
        type: NgModule,
        args: [{
                declarations: [],
                imports: [],
                exports: []
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-communicate.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxCommunicateModule, NgxCommunicateService };

//# sourceMappingURL=ngx-communicate.js.map