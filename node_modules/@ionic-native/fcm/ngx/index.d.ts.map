{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface NotificationData {\n    /**\n     * Determines whether the notification was pressed or not\n     */\n    wasTapped: boolean;\n    /**\n     * Notification data hash item\n     */\n    [name: string]: any;\n}\nexport interface IRequestPushPermissionIOSOptions {\n    /**\n     * Options exclusive for iOS 9 support\n     */\n    ios9Support?: {\n        /**\n         * How long it will wait for a decision from the user before returning `false`, defaults to 10\n         */\n        timeout?: number;\n        /**\n         * How long between each permission verification, defaults to 0.3\n         */\n        interval?: number;\n    };\n}\nexport interface IChannelConfiguration {\n    /**\n     * Channel id, used in the android_channel_id push payload key\n     */\n    id: string;\n    /**\n     * Channel name, visible for the user\n     */\n    name: string;\n    /**\n     * Channel description, visible for the user\n     */\n    description?: string;\n    /**\n     * Importance for notifications of this channel\n     * https://developer.android.com/guide/topics/ui/notifiers/notifications#importance\n     */\n    importance?: 'none' | 'min' | 'low' | 'default' | 'high';\n    /**\n     * Visibility for notifications of this channel\n     * https://developer.android.com/training/notify-user/build-notification#lockscreenNotification\n     */\n    visibility?: 'public' | 'private' | 'secret';\n    /**\n     * Default sound resource for notifications of this channel\n     * The file should located as resources/raw/[resource name].mp3\n     */\n    sound?: string;\n    /**\n     * Enable lights for notifications of this channel\n     */\n    lights?: boolean;\n    /**\n     * Enable vibration for notifications of this channel\n     */\n    vibration?: boolean;\n}\n/**\n * @name FCM\n * @capacitorincompatible true\n * @description\n * Provides basic functionality for Firebase Cloud Messaging\n *\n * @usage\n * ```typescript\n * import { FCM } from '@ionic-native/fcm/ngx';\n *\n * constructor(private fcm: FCM) {}\n *\n * ...\n *\n * this.fcm.subscribeToTopic('marketing');\n *\n * this.fcm.getToken().then(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.onNotification().subscribe(data => {\n *   if(data.wasTapped){\n *     console.log(\"Received in background\");\n *   } else {\n *     console.log(\"Received in foreground\");\n *   };\n * });\n *\n * this.fcm.onTokenRefresh().subscribe(token => {\n *   backend.registerToken(token);\n * });\n *\n * this.fcm.hasPermission().then(hasPermission => {\n *   if (hasPermission) {\n *     console.log(\"Has permission!\");\n *   }\n * })\n *\n * this.fcm.clearAllNotifications();\n *\n * this.fcm.unsubscribeFromTopic('marketing');\n *\n * ```\n * @interfaces\n * NotificationData\n * IRequestPushPermissionIOSOptions\n * IChannelConfiguration\n */\nexport declare class FCM extends IonicNativePlugin {\n    /**\n     * Gets ios device's current APNS token\n     *\n     * @returns {Promise<string>} Returns a Promise that resolves with the APNS token\n     */\n    getAPNSToken(): Promise<string>;\n    /**\n     * Gets device's current registration id\n     *\n     * @returns {Promise<string>} Returns a Promise that resolves with the registration id token\n     */\n    getToken(): Promise<string>;\n    /**\n     * Event firing on the token refresh\n     *\n     * @returns {Observable<string>} Returns an Observable that notifies with the change of device's registration id\n     */\n    onTokenRefresh(): Observable<string>;\n    /**\n     * Subscribes you to a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n     *\n     * @param {string} topic Topic to be subscribed to\n     *\n     * @returns {Promise<any>} Returns a promise resolving in result of subscribing to a topic\n     */\n    subscribeToTopic(topic: string): Promise<any>;\n    /**\n     * Unsubscribes you from a [topic](https://firebase.google.com/docs/notifications/android/console-topics)\n     *\n     * @param {string} topic Topic to be unsubscribed from\n     *\n     * @returns {Promise<any>} Returns a promise resolving in result of unsubscribing from a topic\n     */\n    unsubscribeFromTopic(topic: string): Promise<any>;\n    /**\n     * Checking for permissions on iOS. On android, it always returns `true`.\n     *\n     * @returns {Promise<boolean | null>} Returns a Promise:\n     * - true: push was allowed (or platform is android)\n     * - false: push will not be available\n     * - null: still not answered, recommended checking again later.\n     */\n    hasPermission(): Promise<boolean | null>;\n    /**\n     * Watch for incoming notifications\n     *\n     * @returns {Observable<any>} returns an object with data from the notification\n     */\n    onNotification(): Observable<NotificationData>;\n    /**\n     * Removes existing push notifications from the notifications center\n     *\n     * @returns {Promise<void>}\n     */\n    clearAllNotifications(): void;\n    /**\n     * Request push notification permission, alerting the user if it not have yet decided\n     *\n     * @param {IRequestPushPermissionIOSOptions} options Options for push request\n     *\n     * @returns {Promise<boolean>} Returns a Promise that resolves with the permission status\n     */\n    requestPushPermissionIOS(options?: IRequestPushPermissionIOSOptions): Promise<boolean>;\n    /**\n     * For Android, some notification properties are only defined programmatically.\n     *\n     * Channel can define the default behavior for notifications on Android 8.0+.\n     *\n     * Once a channel is created, it stays unchangeable until the user uninstalls the app.\n     *\n     * @param channelConfig\n     *\n     * @returns {Promise<void>}\n     */\n    createNotificationChannelAndroid(channelConfig: IChannelConfiguration): void;\n}\n"]}