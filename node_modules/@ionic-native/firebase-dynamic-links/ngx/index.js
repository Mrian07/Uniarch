import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseDynamicLinks = /** @class */ (function (_super) {
    __extends(FirebaseDynamicLinks, _super);
    function FirebaseDynamicLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseDynamicLinks.prototype.getDynamicLink = function () { return cordova(this, "getDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.onDynamicLink = function () { return cordova(this, "onDynamicLink", { "callbackOrder": "reverse", "observable": true }, arguments); };
    FirebaseDynamicLinks.prototype.createDynamicLink = function (opts) { return cordova(this, "createDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createShortDynamicLink = function (opts) { return cordova(this, "createShortDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.prototype.createUnguessableDynamicLink = function (opts) { return cordova(this, "createUnguessableDynamicLink", { "otherPromise": true }, arguments); };
    FirebaseDynamicLinks.pluginName = "FirebaseDynamicLinks";
    FirebaseDynamicLinks.plugin = " cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.pluginRef = "cordova.plugins.firebase.dynamiclinks";
    FirebaseDynamicLinks.repo = "https://github.com/chemerisuk/cordova-plugin-firebase-dynamiclinks";
    FirebaseDynamicLinks.install = "ionic cordova plugin add cordova-plugin-firebase-dynamiclinks --save --variable APP_DOMAIN=\"example.com\" --variable APP_PATH=\"/\"";
    FirebaseDynamicLinks.installVariables = ["APP_DOMAIN", "APP_PATH"];
    FirebaseDynamicLinks.platforms = ["Android", "iOS"];
    FirebaseDynamicLinks.decorators = [
        { type: Injectable }
    ];
    return FirebaseDynamicLinks;
}(IonicNativePlugin));
export { FirebaseDynamicLinks };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ZpcmViYXNlLWR5bmFtaWMtbGlua3Mvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFnR1Esd0NBQWlCOzs7O0lBUXpELDZDQUFjO0lBWWQsNENBQWE7SUFZYixnREFBaUIsYUFBQyxJQUFrQjtJQVlwQyxxREFBc0IsYUFBQyxJQUFrQjtJQVl6QywyREFBNEIsYUFBQyxJQUFrQjs7Ozs7Ozs7O2dCQXpEaEQsVUFBVTs7K0JBakdYO0VBa0cwQyxpQkFBaUI7U0FBOUMsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUR5bmFtaWNMaW5rIHtcbiAgbWF0Y2hUeXBlOiAnV2VhaycgfCAnU3Ryb25nJztcbiAgZGVlcExpbms6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGlua09wdGlvbnMge1xuICBkb21haW5VcmlQcmVmaXg/OiBzdHJpbmc7XG4gIGxpbms/OiBzdHJpbmc7XG4gIGFuZHJvaWRJbmZvPzoge1xuICAgIGFuZHJvaWRQYWNrYWdlTmFtZT86IHN0cmluZztcbiAgICBhbmRyb2lkRmFsbGJhY2tMaW5rPzogc3RyaW5nO1xuICAgIGFuZHJvaWRNaW5QYWNrYWdlVmVyc2lvbkNvZGU/OiBudW1iZXI7XG4gIH07XG4gIGlvc0luZm8/OiB7XG4gICAgaW9zQnVuZGxlSWQ/OiBzdHJpbmc7XG4gICAgaW9zRmFsbGJhY2tMaW5rPzogc3RyaW5nO1xuICAgIGlvc0lwYWRGYWxsYmFja0xpbms/OiBzdHJpbmc7XG4gICAgaW9zSXBhZEJ1bmRsZUlkPzogc3RyaW5nO1xuICAgIGlvc0FwcFN0b3JlSWQ/OiBzdHJpbmc7XG4gIH07XG4gIG5hdmlnYXRpb25JbmZvPzoge1xuICAgIGVuYWJsZUZvcmNlZFJlZGlyZWN0PzogYm9vbGVhbjtcbiAgfTtcbiAgYW5hbHl0aWNzSW5mbz86IHtcbiAgICBnb29nbGVQbGF5QW5hbHl0aWNzPzoge1xuICAgICAgdXRtU291cmNlPzogc3RyaW5nO1xuICAgICAgdXRtTWVkaXVtPzogc3RyaW5nO1xuICAgICAgdXRtQ2FtcGFpZ24/OiBzdHJpbmc7XG4gICAgICB1dG1UZXJtPzogc3RyaW5nO1xuICAgICAgdXRtQ29udGVudD86IHN0cmluZztcbiAgICB9O1xuICAgIGl0dW5lc0Nvbm5lY3RBbmFseXRpY3M/OiB7XG4gICAgICBhdD86IHN0cmluZztcbiAgICAgIGN0Pzogc3RyaW5nO1xuICAgICAgcHQ/OiBzdHJpbmc7XG4gICAgfTtcbiAgfTtcbiAgc29jaWFsTWV0YVRhZ0luZm8/OiB7XG4gICAgc29jaWFsVGl0bGU/OiBzdHJpbmc7XG4gICAgc29jaWFsRGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgc29jaWFsSW1hZ2VMaW5rPzogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBGaXJlYmFzZSBEeW5hbWljIExpbmtzXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIGZvciBGaXJlYmFzZSBEeW5hbWljIExpbmtzXG4gKlxuICogVmFyaWFibGVzIEFQUF9ET01BSU4gYW5kIEFQUF9QQVRIIHNwZWNpZnkgd2ViIFVSTCB3aGVyZSB5b3VyIGFwcCB3aWxsIHN0YXJ0IGFuIGFjdGl2aXR5IHRvIGhhbmRsZSB0aGUgbGluay4gVGhleSBhbHNvIHVzZWQgdG8gc2V0dXAgc3VwcG9ydCBmb3IgQXBwIEluZGV4aW5nLlxuICogR28gdG8gZmlyZWJhc2UgY29uc29sZSBhbmQgZXhwb3J0IGdvb2dsZS1zZXJ2aWNlcy5qc29uIGFuZCBHb29nbGVTZXJ2aWNlLUluZm8ucGxpc3QuIFB1dCB0aG9zZSBmaWxlcyBpbnRvIHRoZSByb290IG9mIHlvdXIgY29yZG92YSBhcHAgZm9sZGVyLlxuICpcbiAqIFByZWZlcmVuY2VzOlxuICpcbiAqIFByZWZlcmVuY2VzIEdvb2dsZUlPU0NsaWVudElkIGFuZCBHb29nbGVBbmRyb2lkQ2xpZW50SWQgYXJlIHVzZWQgdG8gc2V0dXAgZHluYW1pYyBsaW5rcyB3aGVuIHlvdSBoYXZlIGFuIGFwcCBmb3Igc2V2ZXJhbCBwbGF0Zm9ybXMuXG4gKiBZb3UgY2FuIGZpbmQgdmFsdWVzIGF0IHlvdXIgR29vZ2xlU2VydmljZS1JbmZvLnBsaXN0IChrZXkgQU5EUk9JRF9DTElFTlRfSUQpIGFuZCBnb29nbGUtc2VydmljZXMuanNvbiAoa2V5IGNsaWVudFswXS5vYXV0aF9jbGllbnRbMF0uY2xpZW50X2lkKS5cbiAqXG4gKiBjb25maWcueG1sOlxuICogYGBgeG1sXG4gKiA8cGxhdGZvcm0gbmFtZT1cImlvc1wiPlxuICogICAgIDxwcmVmZXJlbmNlIG5hbWU9XCJHb29nbGVJT1NDbGllbnRJZFwiIHZhbHVlPVwiLi4uXCIgLz5cbiAqIDwvcGxhdGZvcm0+XG4gKiA8cGxhdGZvcm0gbmFtZT1cImFuZHJvaWRcIj5cbiAqICAgICA8cHJlZmVyZW5jZSBuYW1lPVwiR29vZ2xlQW5kcm9pZENsaWVudElkXCIgdmFsdWU9XCIuLi5cIiAvPlxuICogPC9wbGF0Zm9ybT5cbiAqIGBgYFxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGaXJlYmFzZUR5bmFtaWNMaW5rcyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZmlyZWJhc2UtZHluYW1pYy1saW5rcy9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpcmViYXNlRHluYW1pY0xpbmtzOiBGaXJlYmFzZUR5bmFtaWNMaW5rcykgeyB9XG4gKlxuICogLi4uXG4gKiAvLyBIYW5kbGUgdGhlIGxvZ2ljIGhlcmUgYWZ0ZXIgb3BlbmluZyB0aGUgYXBwIHdpdGggdGhlIER5bmFtaWMgbGlua1xuICogdGhpcy5maXJlYmFzZUR5bmFtaWNMaW5rcy5vbkR5bmFtaWNMaW5rKClcbiAqICAgLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcyksIChlcnJvcjphbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKSk7XG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogRHluYW1pY0xpbmtzT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0ZpcmViYXNlRHluYW1pY0xpbmtzJyxcbiAgcGx1Z2luOiAnIGNvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWR5bmFtaWNsaW5rcycsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5maXJlYmFzZS5keW5hbWljbGlua3MnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtZHluYW1pY2xpbmtzJyxcbiAgaW5zdGFsbDpcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWR5bmFtaWNsaW5rcyAtLXNhdmUgLS12YXJpYWJsZSBBUFBfRE9NQUlOPVwiZXhhbXBsZS5jb21cIiAtLXZhcmlhYmxlIEFQUF9QQVRIPVwiL1wiJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogWydBUFBfRE9NQUlOJywgJ0FQUF9QQVRIJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUR5bmFtaWNMaW5rcyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGFwcCBoYXMgYSBwZW5kaW5nIGR5bmFtaWMgbGluayBhbmQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBkeW5hbWljIGxpbmsgcGFyYW1ldGVycy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxJRHluYW1pY0xpbms+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgZ2V0RHluYW1pY0xpbmsoKTogUHJvbWlzZTxJRHluYW1pY0xpbms+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrIHRoYXQgaXMgdHJpZ2dlcmVkIG9uIGVhY2ggZHluYW1pYyBsaW5rIGNsaWNrLlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPElEeW5hbWljTGluaz59IFJldHVybnMgYW4gb2JzZXJ2YWJsZVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICBvbkR5bmFtaWNMaW5rKCk6IE9ic2VydmFibGU8SUR5bmFtaWNMaW5rPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEeW5hbWljIExpbmsgZnJvbSB0aGUgcGFyYW1ldGVycy4gUmV0dXJucyBhIHByb21pc2UgZnVsZmlsbGVkIHdpdGggdGhlIG5ldyBkeW5hbWljIGxpbmsgdXJsLlxuICAgKiBAcGFyYW0ge0lMaW5rT3B0aW9uc30gb3B0IFtEeW5hbWljIExpbmsgUGFyYW1ldGVyc10oaHR0cHM6Ly9naXRodWIuY29tL2NoZW1lcmlzdWsvY29yZG92YS1wbHVnaW4tZmlyZWJhc2UtZHluYW1pY2xpbmtzI2R5bmFtaWMtbGluay1wYXJhbWV0ZXJzKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHVybFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgY3JlYXRlRHluYW1pY0xpbmsob3B0czogSUxpbmtPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNob3J0ZW5lZCBEeW5hbWljIExpbmsgZnJvbSB0aGUgcGFyYW1ldGVycy4gU2hvcnRlbiB0aGUgcGF0aCB0byBhIHN0cmluZyB0aGF0IGlzIG9ubHkgYXMgbG9uZyBhcyBuZWVkZWQgdG8gYmUgdW5pcXVlLCB3aXRoIGEgbWluaW11bSBsZW5ndGggb2YgNCBjaGFyYWN0ZXJzLiBVc2UgdGhpcyBtZXRob2QgaWYgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIHdvdWxkIG5vdCBiZSBleHBvc2VkIGlmIGEgc2hvcnQgRHluYW1pYyBMaW5rIFVSTCB3ZXJlIGd1ZXNzZWQuXG4gICAqIEBwYXJhbSB7SUxpbmtPcHRpb25zfSBvcHQgW0R5bmFtaWMgTGluayBQYXJhbWV0ZXJzXShodHRwczovL2dpdGh1Yi5jb20vY2hlbWVyaXN1ay9jb3Jkb3ZhLXBsdWdpbi1maXJlYmFzZS1keW5hbWljbGlua3MjZHluYW1pYy1saW5rLXBhcmFtZXRlcnMpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgdXJsXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICB9KVxuICBjcmVhdGVTaG9ydER5bmFtaWNMaW5rKG9wdHM6IElMaW5rT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBEeW5hbWljIExpbmsgZnJvbSB0aGUgcGFyYW1ldGVycy4gU2hvcnRlbiB0aGUgcGF0aCB0byBhbiB1bmd1ZXNzYWJsZSBzdHJpbmcuIFN1Y2ggc3RyaW5ncyBhcmUgY3JlYXRlZCBieSBiYXNlNjItZW5jb2RpbmcgcmFuZG9tbHkgZ2VuZXJhdGVkIDk2LWJpdCBudW1iZXJzLCBhbmQgY29uc2lzdCBvZiAxNyBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy4gVXNlIHVuZ3Vlc3NhYmxlIHN0cmluZ3MgdG8gcHJldmVudCB5b3VyIER5bmFtaWMgTGlua3MgZnJvbSBiZWluZyBjcmF3bGVkLCB3aGljaCBjYW4gcG90ZW50aWFsbHkgZXhwb3NlIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIHtJTGlua09wdGlvbnN9IG9wdCBbRHluYW1pYyBMaW5rIFBhcmFtZXRlcnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9jaGVtZXJpc3VrL2NvcmRvdmEtcGx1Z2luLWZpcmViYXNlLWR5bmFtaWNsaW5rcyNkeW5hbWljLWxpbmstcGFyYW1ldGVycylcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSB1cmxcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIGNyZWF0ZVVuZ3Vlc3NhYmxlRHluYW1pY0xpbmsob3B0czogSUxpbmtPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==