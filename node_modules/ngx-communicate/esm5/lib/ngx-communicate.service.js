/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-communicate.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
var NgxCommunicateService = /** @class */ (function () {
    function NgxCommunicateService() {
        this._map = new Map();
    }
    /**
     * @method send
     * @property data
     * @returns void
     */
    /**
     * \@method send
     * \@property data
     * @param {?} event
     * @param {?} data
     * @return {?} void
     */
    NgxCommunicateService.prototype.broadcast = /**
     * \@method send
     * \@property data
     * @param {?} event
     * @param {?} data
     * @return {?} void
     */
    function (event, data) {
        /** @type {?} */
        var subscribers = this._map.get(event) || [];
        subscribers.forEach((/**
         * @param {?} subscriber
         * @return {?}
         */
        function (subscriber) { return subscriber(data); }));
    };
    /**
     * @method on
     * @description Subscribes to an event
     * @var event Event Name
     * @var callback the function that will return the data of that event
     */
    /**
     * \@method on
     * \@description Subscribes to an event
     * \@var event Event Name / callback the function that will return the data of that event
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    NgxCommunicateService.prototype.on = /**
     * \@method on
     * \@description Subscribes to an event
     * \@var event Event Name / callback the function that will return the data of that event
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    function (event, callback) {
        /** @type {?} */
        var subscribers = this._map.get(event);
        if (subscribers == undefined)
            subscribers = new Array();
        subscribers.push(callback);
        this._map.set(event, subscribers);
    };
    NgxCommunicateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    NgxCommunicateService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxCommunicateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxCommunicateService_Factory() { return new NgxCommunicateService(); }, token: NgxCommunicateService, providedIn: "root" });
    return NgxCommunicateService;
}());
export { NgxCommunicateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxCommunicateService.prototype._map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvbW11bmljYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29tbXVuaWNhdGUvIiwic291cmNlcyI6WyJsaWIvbmd4LWNvbW11bmljYXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUUzQztJQU1FO1FBRlEsU0FBSSxHQUE0QyxJQUFJLEdBQUcsRUFBc0MsQ0FBQztJQUV0RixDQUFDO0lBRWpCOzs7O09BSUc7Ozs7Ozs7O0lBQ0gseUNBQVM7Ozs7Ozs7SUFBVCxVQUFVLEtBQWEsRUFBRSxJQUFTOztZQUMxQixXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtRQUM5QyxXQUFXLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsVUFBVSxJQUFJLE9BQUEsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFoQixDQUFnQixFQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7Ozs7SUFDSCxrQ0FBRTs7Ozs7Ozs7SUFBRixVQUFHLEtBQWEsRUFBRSxRQUE2Qjs7WUFDekMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUV0QyxJQUFJLFdBQVcsSUFBSSxTQUFTO1lBQzFCLFdBQVcsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBRzVCLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O2dCQWpDRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OztnQ0FKRDtDQW9DQyxBQWxDRCxJQWtDQztTQS9CWSxxQkFBcUI7Ozs7OztJQUNoQyxxQ0FBc0ciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBcInJvb3RcIlxufSlcbmV4cG9ydCBjbGFzcyBOZ3hDb21tdW5pY2F0ZVNlcnZpY2Uge1xuICBwcml2YXRlIF9tYXA6IE1hcDxzdHJpbmcsIEFycmF5PChkYXRhOiBhbnkpID0+IHZvaWQ+PiA9IG5ldyBNYXA8c3RyaW5nLCBBcnJheTwoZGF0YTogYW55KSA9PiB2b2lkPj4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8qKlxuICAgKiBAbWV0aG9kIHNlbmRcbiAgICogQHByb3BlcnR5IGRhdGFcbiAgICogQHJldHVybnMgdm9pZFxuICAgKi9cbiAgYnJvYWRjYXN0KGV2ZW50OiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gdGhpcy5fbWFwLmdldChldmVudCkgfHwgW107XG4gICAgc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoZGF0YSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgb25cbiAgICogQGRlc2NyaXB0aW9uIFN1YnNjcmliZXMgdG8gYW4gZXZlbnRcbiAgICogQHZhciBldmVudCBFdmVudCBOYW1lXG4gICAqIEB2YXIgY2FsbGJhY2sgdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gdGhlIGRhdGEgb2YgdGhhdCBldmVudFxuICAgKi9cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6IChkYXRhOiBhbnkpID0+IHZvaWQpIHtcbiAgICBsZXQgc3Vic2NyaWJlcnMgPSB0aGlzLl9tYXAuZ2V0KGV2ZW50KTtcblxuICAgIGlmIChzdWJzY3JpYmVycyA9PSB1bmRlZmluZWQpXG4gICAgICBzdWJzY3JpYmVycyA9IG5ldyBBcnJheSgpO1xuXG5cbiAgICBzdWJzY3JpYmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0aGlzLl9tYXAuc2V0KGV2ZW50LCBzdWJzY3JpYmVycyk7XG4gIH1cbn1cbiJdfQ==