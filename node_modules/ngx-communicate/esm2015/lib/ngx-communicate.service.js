/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-communicate.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
export class NgxCommunicateService {
    constructor() {
        this._map = new Map();
    }
    /**
     * \@method send
     * \@property data
     * @param {?} event
     * @param {?} data
     * @return {?} void
     */
    broadcast(event, data) {
        /** @type {?} */
        const subscribers = this._map.get(event) || [];
        subscribers.forEach((/**
         * @param {?} subscriber
         * @return {?}
         */
        subscriber => subscriber(data)));
    }
    /**
     * \@method on
     * \@description Subscribes to an event
     * \@var event Event Name / callback the function that will return the data of that event
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    on(event, callback) {
        /** @type {?} */
        let subscribers = this._map.get(event);
        if (subscribers == undefined)
            subscribers = new Array();
        subscribers.push(callback);
        this._map.set(event, subscribers);
    }
}
NgxCommunicateService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
NgxCommunicateService.ctorParameters = () => [];
/** @nocollapse */ NgxCommunicateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NgxCommunicateService_Factory() { return new NgxCommunicateService(); }, token: NgxCommunicateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxCommunicateService.prototype._map;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWNvbW11bmljYXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29tbXVuaWNhdGUvIiwic291cmNlcyI6WyJsaWIvbmd4LWNvbW11bmljYXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUszQyxNQUFNLE9BQU8scUJBQXFCO0lBR2hDO1FBRlEsU0FBSSxHQUE0QyxJQUFJLEdBQUcsRUFBc0MsQ0FBQztJQUV0RixDQUFDOzs7Ozs7OztJQU9qQixTQUFTLENBQUMsS0FBYSxFQUFFLElBQVM7O2NBQzFCLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1FBQzlDLFdBQVcsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7Ozs7SUFRRCxFQUFFLENBQUMsS0FBYSxFQUFFLFFBQTZCOztZQUN6QyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBRXRDLElBQUksV0FBVyxJQUFJLFNBQVM7WUFDMUIsV0FBVyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFHNUIsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7O1lBakNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUVDLHFDQUFzRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46IFwicm9vdFwiXG59KVxuZXhwb3J0IGNsYXNzIE5neENvbW11bmljYXRlU2VydmljZSB7XG4gIHByaXZhdGUgX21hcDogTWFwPHN0cmluZywgQXJyYXk8KGRhdGE6IGFueSkgPT4gdm9pZD4+ID0gbmV3IE1hcDxzdHJpbmcsIEFycmF5PChkYXRhOiBhbnkpID0+IHZvaWQ+PigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIEBtZXRob2Qgc2VuZFxuICAgKiBAcHJvcGVydHkgZGF0YVxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBicm9hZGNhc3QoZXZlbnQ6IHN0cmluZywgZGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSB0aGlzLl9tYXAuZ2V0KGV2ZW50KSB8fCBbXTtcbiAgICBzdWJzY3JpYmVycy5mb3JFYWNoKHN1YnNjcmliZXIgPT4gc3Vic2NyaWJlcihkYXRhKSk7XG4gIH1cblxuICAvKipcbiAgICogQG1ldGhvZCBvblxuICAgKiBAZGVzY3JpcHRpb24gU3Vic2NyaWJlcyB0byBhbiBldmVudFxuICAgKiBAdmFyIGV2ZW50IEV2ZW50IE5hbWVcbiAgICogQHZhciBjYWxsYmFjayB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgZGF0YSBvZiB0aGF0IGV2ZW50XG4gICAqL1xuICBvbihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKGRhdGE6IGFueSkgPT4gdm9pZCkge1xuICAgIGxldCBzdWJzY3JpYmVycyA9IHRoaXMuX21hcC5nZXQoZXZlbnQpO1xuXG4gICAgaWYgKHN1YnNjcmliZXJzID09IHVuZGVmaW5lZClcbiAgICAgIHN1YnNjcmliZXJzID0gbmV3IEFycmF5KCk7XG5cblxuICAgIHN1YnNjcmliZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIHRoaXMuX21hcC5zZXQoZXZlbnQsIHN1YnNjcmliZXJzKTtcbiAgfVxufVxuIl19